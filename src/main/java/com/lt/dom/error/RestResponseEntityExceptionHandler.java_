package com.lt.dom.error;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

@ControllerAdvice
public class RestResponseEntityExceptionHandler 
  extends ResponseEntityExceptionHandler {

    @ExceptionHandler(value
      = { IllegalArgumentException.class, IllegalStateException.class })
    protected ResponseEntity<Object> handleConflict(
      RuntimeException ex, WebRequest request) {
        String bodyOfResponse = "This should be application specific";
        ResponseDTO<Object> response= new ResponseDTO<Object>(HttpStatus.INTERNAL_SERVER_ERROR,Constants.STATUS_FAIL,ex.getLocalizedMessage(),false);

        return handleExceptionInternal(ex, bodyOfResponse, 
          new HttpHeaders(), HttpStatus.CONFLICT, request);

        return new ResponseEntity<ResponseDTO<Object>>(response,HttpStatus.INTERNAL_SERVER_ERROR);

    }
    }

    @ExceptionHandler(value
            = { DataNotFound.class })
    protected ResponseEntity<Object> handleData(
            RuntimeException ex, WebRequest request) {
        String bodyOfResponse = "已存在";
        return handleExceptionInternal(ex, bodyOfResponse,
                new HttpHeaders(), HttpStatus., request);
    }

}